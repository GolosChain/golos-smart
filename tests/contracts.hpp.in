#pragma once
#include <stdlib.h>
#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

#define GOLOS_CONTRACTS "${CMAKE_BINARY_DIR}/../"
#define CYBERWAY_CONTRACTS "${CMAKE_BINARY_DIR}/../../cyberway.contracts/build/"

const std::string golos_contracts = getenv("GOLOS_CONTRACTS") ?: GOLOS_CONTRACTS;
const std::string cyberway_contracts = getenv("CYBERWAY_CONTRACTS") ?: CYBERWAY_CONTRACTS;

static inline std::vector<uint8_t> read_wasm(const std::string& filename) {return read_wasm(filename.c_str());}
static inline std::vector<char> read_abi(const std::string& filename) {return read_abi(filename.c_str());}

struct contracts {
    static std::vector<uint8_t> ctrl_wasm() { return read_wasm(golos_contracts + "/golos.ctrl/golos.ctrl.wasm"); }
    static std::vector<char>    ctrl_abi()  { return read_abi (golos_contracts + "/golos.ctrl/golos.ctrl.abi"); }
    static std::vector<uint8_t> emit_wasm() { return read_wasm(golos_contracts + "/golos.emit/golos.emit.wasm"); }
    static std::vector<char>    emit_abi()  { return read_abi (golos_contracts + "/golos.emit/golos.emit.abi"); }
    static std::vector<uint8_t> vesting_wasm() { return read_wasm(golos_contracts + "/golos.vesting/golos.vesting.wasm"); }
    static std::vector<char>    vesting_abi()  { return read_abi (golos_contracts + "/golos.vesting/golos.vesting.abi"); }
    static std::vector<uint8_t> posting_wasm() { return read_wasm(golos_contracts + "/golos.publication/golos.publication.wasm"); }
    static std::vector<char>    posting_abi()  { return read_abi (golos_contracts + "/golos.publication/golos.publication.abi"); }
    static std::vector<uint8_t> charge_wasm() { return read_wasm(golos_contracts + "/golos.charge/golos.charge.wasm"); }
    static std::vector<char>    charge_abi()  { return read_abi (golos_contracts + "/golos.charge/golos.charge.abi"); }
    static std::vector<uint8_t> reward_calcs_wasm() { return read_wasm(golos_contracts + "/reward_calcs/reward_calcs.wasm"); }
    static std::vector<char>    reward_calcs_abi()  { return read_abi (golos_contracts + "/reward_calcs/reward_calcs.abi"); }
    static std::vector<uint8_t> social_wasm() { return read_wasm(golos_contracts + "/golos.social/golos.social.wasm"); }
    static std::vector<char>    social_abi()  { return read_abi (golos_contracts + "/golos.social/golos.social.abi"); }
    static std::vector<uint8_t> referral_wasm() { return read_wasm(GOLOS_CONTRACTS "golos.referral/golos.referral.wasm"); }
    static std::vector<char>    referral_abi()  { return read_abi (GOLOS_CONTRACTS "golos.referral/golos.referral.abi"); }


    static std::vector<uint8_t> system_wasm() { return read_wasm(cyberway_contracts + "/eosio.system/eosio.system.wasm"); }
    static std::vector<char>    system_abi()  { return read_abi (cyberway_contracts + "/eosio.system/eosio.system.abi"); }
    static std::vector<uint8_t> token_wasm()  { return read_wasm(cyberway_contracts + "/eosio.token/eosio.token.wasm"); }
    static std::vector<char>    token_abi()   { return read_abi (cyberway_contracts + "/eosio.token/eosio.token.abi"); }
    static std::vector<uint8_t> msig_wasm()   { return read_wasm(cyberway_contracts + "/eosio.msig/eosio.msig.wasm"); }
    static std::vector<char>    msig_abi()    { return read_abi (cyberway_contracts + "/eosio.msig/eosio.msig.abi"); }
    static std::vector<uint8_t> wrap_wasm()   { return read_wasm(cyberway_contracts + "/eosio.wrap/eosio.wrap.wasm"); }
    static std::vector<char>    wrap_abi()    { return read_abi (cyberway_contracts + "/eosio.wrap/eosio.wrap.abi"); }
    static std::vector<uint8_t> bios_wasm()   { return read_wasm(cyberway_contracts + "/eosio.bios/eosio.bios.wasm"); }
    static std::vector<char>    bios_abi()    { return read_abi (cyberway_contracts + "/eosio.bios/eosio.bios.abi"); }
};

}} // eosio::testing
